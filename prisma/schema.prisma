generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Table {
  id          Int       @id @default(autoincrement())
  tableNumber Int       @unique
  seats       Int
  location    String?
  bookings    Booking[]
  // orders      Order[] // Allow orders to be associated with tables
}

model Booking {
  id             Int       @id @default(autoincrement())
  customerName   String
  email          String?
  phone          String?
  partySize      Int
  bookingTime    DateTime
  specialRequest String?
  status         String    @default("pending")
  createdAt      DateTime  @default(now())
  table          Table?    @relation(fields: [tableId], references: [id])
  tableId        Int?
  userId         String?
  user           User?     @relation(fields: [userId], references: [id])
  // Added relation to Waitlist
  waitlistEntry  Waitlist? @relation(fields: [waitlistId], references: [id])
  waitlistId     String?

  @@index([userId])
  @@index([waitlistId])
}

model Menu {
  id          String     @id @default(cuid())
  name        String
  description String?
  isActive    Boolean    @default(true)
  isPickup    Boolean    @default(true)
  items       MenuItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Category {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  items       MenuItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  promotions  Promotion[] @relation("CategoryPromotions")
}

model MenuItem {
  id            String       @id @default(cuid())
  name          String
  description   String?
  price         Decimal      @db.Decimal(10, 2)
  image         String?
  isAvailable   Boolean      @default(true)
  // Dietary preferences
  isVegetarian  Boolean      @default(false)
  isVegan       Boolean      @default(false)
  isPescatarian Boolean      @default(false)
  isGlutenFree  Boolean      @default(false)
  isDairyFree   Boolean      @default(false)
  isNutFree     Boolean      @default(false)
  isSpicy       Boolean      @default(false)
  dietary       DietaryTag[]
  // Relations
  menuId        String
  menu          Menu         @relation(fields: [menuId], references: [id])
  categoryId    String
  category      Category     @relation(fields: [categoryId], references: [id])
  promotions    Promotion[]  @relation("MenuItemPromotions")
  reviews       Review[]
  orderItems    OrderItem[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Promotion     Promotion[]

  @@index([menuId])
  @@index([categoryId])
}

model DietaryTag {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  color       String? // For UI display
  items       MenuItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Order {
  id                  String        @id @default(cuid())
  orderNumber         String?       @unique // Customer-facing order number
  total               Decimal       @db.Decimal(10, 2)
  status              OrderStatus   @default(PENDING)
  paymentStatus       PaymentStatus @default(PENDING)
  paymentMethod       String?
  paymentIntentId     String? // Store Stripe payment intent ID
  chargeId            String? // Store Stripe charge ID
  orderType           OrderType     @default(DINE_IN)
  isNotified          Boolean       @default(false) // Tracks if staff has been notified
  orderNotes          String?
  estimatedPickupTime DateTime?
  completedTime       DateTime?

  // Customer information
  userId             String
  user               User                @relation(fields: [userId], references: [id])
  appliedPromotionId String?
  appliedPromotion   Promotion?          @relation(fields: [appliedPromotionId], references: [id])
  discountAmount     Decimal             @default(0)
  items              OrderItem[]
  statusUpdates      OrderStatusUpdate[]
  sales              Sale[]
  promotionUsages    PromotionUsage[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@index([userId])
}

model OrderStatusUpdate {
  id          String      @id @default(cuid())
  status      OrderStatus
  note        String?
  orderId     String
  order       Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  updatedById String
  updatedBy   User        @relation(fields: [updatedById], references: [id])
  createdAt   DateTime    @default(now())

  @@index([orderId])
  @@index([updatedById])
}

model OrderItem {
  id                  String   @id @default(cuid())
  quantity            Int
  price               Decimal  @db.Decimal(10, 2)
  specialInstructions String?
  menuItemId          String
  menuItem            MenuItem @relation(fields: [menuItemId], references: [id])
  orderId             String
  order               Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([menuItemId])
  @@index([orderId])
}

model Notification {
  id             String           @id @default(cuid())
  type           NotificationType
  message        String
  isRead         Boolean          @default(false)
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  relatedOrderId String?
  createdAt      DateTime         @default(now())

  @@index([userId])
  @@index([relatedOrderId])
}

model Review {
  id         String   @id @default(cuid())
  rating     Int      @default(5)
  title      String?
  content    String
  userId     String
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  isVerified Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([menuItemId])
  @@index([userId])
}

// New Sales Table
model Sale {
  id            String        @id @default(cuid())
  saleNumber    String?       @unique // For customer-facing receipts
  subtotal      Decimal       @db.Decimal(10, 2)
  tax           Decimal       @db.Decimal(10, 2)
  tip           Decimal?      @db.Decimal(10, 2)
  discount      Decimal?      @db.Decimal(10, 2)
  total         Decimal       @db.Decimal(10, 2)
  paymentMethod String // Credit, Cash, Mobile, etc.
  paymentStatus PaymentStatus @default(PAID)

  // Relations
  orderId String? // Optional - if associated with an order
  order   Order?  @relation(fields: [orderId], references: [id])

  serverId String? // Server/waiter who handled the transaction
  server   User?   @relation(name: "ServerSales", fields: [serverId], references: [id])

  processedById String // Admin/staff who processed the payment
  processedBy   User   @relation(name: "ProcessedSales", fields: [processedById], references: [id])

  // Additional info
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([serverId])
  @@index([processedById])
}

// New Waitlist Table
model Waitlist {
  id               String         @id @default(cuid())
  customerName     String
  phoneNumber      String
  email            String?
  partySize        Int
  requestedDate    DateTime
  requestedTime    DateTime
  estimatedWait    Int? // In minutes
  status           WaitlistStatus @default(WAITING)
  notificationSent Boolean        @default(false)

  // Customer information
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  // Related reservation (if eventually seated)
  bookings Booking[]

  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  phone         String?
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Enhanced user profile fields for staff management
  employeeId   String?    @unique
  firstName    String?
  lastName     String?
  status       UserStatus @default(ACTIVE)
  hireDate     DateTime?
  createdById  String?
  createdBy    User?      @relation("UserCreator", fields: [createdById], references: [id])
  createdUsers User[]     @relation("UserCreator")

  reviews         Review[]
  bookings        Booking[]
  orders          Order[]
  waitlistEntries Waitlist[]
  serverSales     Sale[]           @relation("ServerSales")
  processedSales  Sale[]           @relation("ProcessedSales")
  promotionUsages PromotionUsage[]

  statusUpdates OrderStatusUpdate[]
  notifications Notification[]

  // New relations for user management
  auditLogs          UserAuditLog[]   @relation("AuditUser")
  performedAudits    UserAuditLog[]   @relation("AuditPerformer")
  sessions           UserSession[]
  userPermissions    UserPermission[]
  grantedPermissions UserPermission[] @relation("PermissionGranter")

  @@index([employeeId])
  @@index([createdById])
}

// User audit log table for tracking user management actions
model UserAuditLog {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation("AuditUser", fields: [userId], references: [id], onDelete: Cascade)
  action        String // CREATE, UPDATE, DELETE, LOGIN, LOGOUT, ROLE_CHANGE, etc.
  details       Json? // Additional details about the action
  performedById String
  performedBy   User     @relation("AuditPerformer", fields: [performedById], references: [id])
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime @default(now())

  @@index([userId])
  @@index([performedById])
  @@index([action])
  @@index([createdAt])
}

// User sessions tracking for security and management
model UserSession {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  loginTime  DateTime  @default(now())
  logoutTime DateTime?
  ipAddress  String?
  userAgent  String?
  isActive   Boolean   @default(true)
  sessionId  String?   @unique // For NextAuth session management
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
  @@index([sessionId])
  @@index([isActive])
}

// Permissions table for granular access control
model Permission {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  category      String // MENU_MANAGEMENT, ORDER_MANAGEMENT, etc.
  isSystemLevel Boolean  @default(false) // System-level permissions that can't be revoked
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@index([category])
  @@index([name])
}

// Role-based permissions (default permissions for each role)
model RolePermission {
  id           String     @id @default(cuid())
  role         Role
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  granted      Boolean    @default(true)
  createdAt    DateTime   @default(now())

  @@unique([role, permissionId])
  @@index([role])
  @@index([permissionId])
}

// User-specific permission overrides
model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  granted      Boolean // true = grant permission, false = revoke permission
  grantedById  String
  grantedBy    User       @relation("PermissionGranter", fields: [grantedById], references: [id])
  reason       String? // Optional reason for the permission change
  expiresAt    DateTime? // Optional expiration for temporary permissions
  createdAt    DateTime   @default(now())

  @@unique([userId, permissionId])
  @@index([userId])
  @@index([permissionId])
  @@index([grantedById])
}

enum PromotionType {
  PERCENTAGE_DISCOUNT
  FIXED_AMOUNT_DISCOUNT
  FREE_ITEM
  BUY_ONE_GET_ONE
}

model Promotion {
  id                String        @id @default(cuid())
  name              String
  description       String?
  promotionType     PromotionType
  value             Decimal // Percentage or fixed amount
  minimumOrderValue Decimal? // For minimum purchase requirements
  startDate         DateTime
  endDate           DateTime
  isActive          Boolean       @default(true)

  // For FREE_ITEM promotions
  freeItemId String?
  freeItem   MenuItem? @relation(fields: [freeItemId], references: [id])

  // For coupon codes
  couponCode String? @unique
  usageLimit Int? // Max number of uses
  usageCount Int     @default(0)

  // For specific menu items or categories
  applyToAllItems Boolean    @default(false)
  menuItems       MenuItem[] @relation("MenuItemPromotions")
  categories      Category[] @relation("CategoryPromotions")

  // For tracking
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  appliedOrders Order[]
  usageRecords  PromotionUsage[]
}

model PromotionUsage {
  id          String    @id @default(cuid())
  promotionId String
  promotion   Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  // Customer and order information
  userId  String
  user    User    @relation(fields: [userId], references: [id])
  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id])

  // Usage details
  discountAmount Decimal @db.Decimal(10, 2) // Actual discount applied
  originalAmount Decimal @db.Decimal(10, 2) // Order total before discount
  finalAmount    Decimal @db.Decimal(10, 2) // Order total after discount

  // Metadata
  couponCode      String? // The code used (if any)
  customerSegment String? // new, returning, vip, etc.
  orderType       OrderType? // DINE_IN, PICKUP
  deviceType      String? // mobile, desktop, tablet
  referralSource  String? // social, email, organic, etc.

  // Additional tracking
  isFirstTimeUse   Boolean @default(false) // First time this user used any promotion
  timeToConversion Int? // Minutes from promotion start to use
  cartItemCount    Int? // Number of items in cart

  createdAt DateTime @default(now())

  @@index([promotionId])
  @@index([userId])
  @@index([orderId])
  @@index([createdAt])
}

enum WaitlistStatus {
  WAITING
  NOTIFIED
  SEATED
  CANCELLED
  NO_SHOW
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Role {
  USER
  ADMIN
  CHEF
  WAITER
  MANAGER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_PICKUP
  COMPLETED
  CANCELED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum OrderType {
  DINE_IN
  PICKUP
}

enum NotificationType {
  NEW_ORDER
  ORDER_STATUS_CHANGE
  ORDER_ASSIGNED
  PAYMENT_RECEIVED
  REVIEW_RECEIVED
  SYSTEM_ALERT
}
